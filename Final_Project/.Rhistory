germany_cum_data_full =
data.frame(delta_inf= germany_delta_inf, cum_delta_inf=germany_cum_delta_inf,
delta_recovered = germany_delta_recovered,
cum_delta_recovered= germany_cum_delta_recovered, delta_deaths = germany_delta_deaths,
cum_delta_deaths=germany_cum_delta_deaths)
##VARY THE NUMBER OF DAYS CHOSEN FOR ANALYSIS
ndays = 65:97
gamma_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(gamma_data) <- x
beta_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(beta_data) <- x
R0_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(R0_data) <- x
#loop over days window chosen
for (days in ndays) {
germany_cum_data = germany_cum_data_full[1:days, ]
#View(germany_cum_data)
#fitting a linear model for case fatality ratio
germany_gamma <- lm(cum_delta_deaths ~ cum_delta_inf-1  , data=germany_cum_data)
# build linear regression model on full data
###ESTIMATING CASE  RECOVERY RATIO
cor(germany_cum_delta_inf, germany_cum_delta_recovered)
#high correlation
#fitting a linear model for case recovery ratio
germany_beta <- lm(cum_delta_recovered ~ cum_delta_inf-1 , data=germany_cum_data)
# build linear regression model on full data with no intercept
###ESTIMATING R0
#fitting a linear model for case basic reproducibility number R0
germany_R0 <- lm(cum_delta_deaths + cum_delta_recovered + cum_delta_inf
~ I(cum_delta_recovered + cum_delta_deaths)-1  , data=germany_cum_data)
# build linear regression model on full data
##Storing estimations and conf intervals
conf = confint(germany_gamma)
gamma_row <- list(est = summary(germany_gamma)$coefficients[1], lwr = conf[1], upr = conf[2])
gamma_data = rbind(gamma_data, gamma_row)
conf = confint(germany_beta)
beta_row <- list(est = summary(germany_beta)$coefficients[1], lwr = conf[1], upr = conf[2])
beta_data = rbind(beta_data, beta_row)
conf = confint(germany_R0)
R0_row <- list(est = summary(germany_R0)$coefficients[1], lwr = conf[1], upr = conf[2])
R0_data = rbind(R0_data, R0_row)
}
ggplot(R0_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab("R0") + ggtitle("Germany: R0 estimate evolution ")
ggplot(beta_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab("case recovery ratio") + ggtitle("Germany: case recovery ratio estimate evolution ")
ggplot(gamma_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab(" case fatality ratio") + ggtitle(" Germany: case fatality ratio estimate evolution ")
##Predicted R0 using model
# add 'fit', 'lwr', and 'upr' columns to dataframe (generated by predict)
R0_predict <- cbind(germany_cum_data, predict(germany_R0, interval = 'confidence'))
R0_prediction = predict(germany_R0)
# plot the points (actual observations), regression line, and confidence interval
p <- ggplot(R0_predict, aes(cum_delta_recovered + cum_delta_deaths, cum_delta_recovered +
cum_delta_deaths + cum_delta_inf))
p <- p + geom_point()
p <- p + geom_line(aes(cum_delta_deaths + cum_delta_recovered, R0_prediction))
p <- p + geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) +
ggtitle("Germany: Fitted R0 line and  actual data")
p
library(deSolve)
library(RColorBrewer)
Infected <- germany_inf[50:97]
Recovered <- germany_recovered[50:97]
Deaths <- germany_deaths[50:97]
Confirmed <- germany_cnf[50:97]
day <- 0:(length(Infected)-1)
N <- 830000
###edit 1: use different boundary condition
###init <- c(S = N-1, I = 1, R = 0)
init <- c(S = N-Infected[1] - Recovered[1] - Deaths[1], I = Infected[1], R = Recovered[1], D = Deaths[1])
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
####edit 2; use equally scaled variables
with(par, { dS <- -alpha * (S/N) * I
dI <- alpha * (S/N) * I - beta * I - gamma * I
dR <- beta * I
dD <- gamma * I
list(c(dS, dI, dR, dD))
})
}
RSS.SIR <- function(parameters) {
names(parameters) <- c("alpha", "beta", "gamma")
out <- ode(y = init, times = day, func = SIR, parms = parameters)
fit <- out[ , 3] + out[ , 4] + out[ , 5]
RSS <- sum((Confirmed- fit)^2)
return(RSS)
}
lower = c(0, 0, 0)
upper = c(10, 1, 1)  ###Limit box for parameters for L-BFGS-B
optimsstart <- c(0.7, 0.4,  0.2) #initial guess for parameters
set.seed(12)
Opt <- optim(optimsstart, RSS.SIR, method = "L-BFGS-B", lower = lower, upper = upper,
hessian = TRUE)
#Opt$par
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title("{Germany: Green is confirmed cases predicted by our model, red is actual data.}")
country = "India" #Country chosen
#Extract country data from countries data
germany_cnf_melt = confirmed_countries_melt[which(confirmed_countries_melt$Country.Region == country), ]
#Extract confirmed number  as a vector
germany_cnf = germany_cnf_melt$value
#Extract delta infected vector delta_cnf(t) = I(t) - I(t-1)
germany_delta_cnf = diff(germany_cnf)
#Cumulative sum of delta_cnf
germany_cum_delta_cnf = cumsum(germany_delta_cnf)
germany_deaths_melt = deaths_countries_melt[which(deaths_countries_melt$Country.Region == country), ]
#Extract deaths number as a vector
germany_deaths = germany_deaths_melt$value
#Extract delta deathsvector delta_deaths(t) = D(t) - D(t-1)
germany_delta_deaths = diff(germany_deaths)
#Cumulative sum of delta_deaths
germany_cum_delta_deaths = cumsum(germany_delta_deaths)
#Extract germany data from countries recovered data
germany_recovered_melt =
recovered_countries_melt[which(recovered_countries_melt$Country.Region == country), ]
#Extract recovered number as a vector
germany_recovered = germany_recovered_melt$value
#Extract delta recovered vector delta_recovered(t) = R(t) - R(t-1)
germany_delta_recovered = diff(germany_recovered)
#Cumulative sum of delta_recovered
germany_cum_delta_recovered = cumsum(germany_delta_recovered)
### Caluclating infected numbers from confirmed cases
#Extract infected number cases as a vector
germany_inf = germany_cnf - germany_recovered - germany_deaths
#Extract delta infected vector delta_inf(t) = I(t) - I(t-1)
germany_delta_inf = diff(germany_inf)
#Cumulative sum of delta_inf
germany_cum_delta_inf = cumsum(germany_delta_inf)
###ESTIMATING CASE FATALITY RATIO
#Making data frame of cumulative data
germany_cum_data_full = data.frame(delta_inf= germany_delta_inf, cum_delta_inf=germany_cum_delta_inf, delta_recovered = germany_delta_recovered, cum_delta_recovered= germany_cum_delta_recovered, delta_deaths = germany_delta_deaths, cum_delta_deaths=germany_cum_delta_deaths)
##VARY THE NUMBER OF DAYS CHOSEN FOR ANALYSIS
ndays = 65:97
gamma_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(gamma_data) <- x
beta_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(beta_data) <- x
R0_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(R0_data) <- x
#loop over days window chosen
for (days in ndays) {
germany_cum_data = germany_cum_data_full[1:days, ]
#View(germany_cum_data)
#fitting a linear model for case fatality ratio
germany_gamma <- lm(cum_delta_deaths ~ cum_delta_inf  -1  , data=germany_cum_data)
# build linear regression model on full data
###ESTIMATING CASE  RECOVERY RATIO
cor(germany_cum_delta_inf, germany_cum_delta_recovered)
#high correlation
#fitting a linear model for case recovery ratio
germany_beta <- lm(cum_delta_recovered ~ cum_delta_inf -1 , data=germany_cum_data)
# build linear regression model on full data with no intercept
###ESTIMATING R0
#fitting a linear model for case basic reproducibility number R0
germany_R0 <- lm(cum_delta_deaths + cum_delta_recovered + cum_delta_inf
~ I(cum_delta_recovered + cum_delta_deaths) - 1  , data=germany_cum_data)
# build linear regression model on full data
##Storing estimations and conf intervals
conf = confint(germany_gamma)
gamma_row <-
list(est = summary(germany_gamma)$coefficients[1],
lwr = conf[1], upr = conf[2])
gamma_data = rbind(gamma_data, gamma_row)
conf = confint(germany_beta)
beta_row <-
list(est = summary(germany_beta)$coefficients[1], lwr = conf[1], upr = conf[2])
beta_data = rbind(beta_data, beta_row)
conf = confint(germany_R0)
R0_row <-
list(est = summary(germany_R0)$coefficients[1], lwr = conf[1], upr = conf[2])
R0_data = rbind(R0_data, R0_row)
}
ggplot(R0_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab("R0") + ggtitle("India:R0 estimate evolution ")
ggplot(beta_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab("case recovery ratio") + ggtitle("India: case recovery ratio estimate evolution ")
ggplot(gamma_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab(" case fatality ratio") + ggtitle("India: case fatality ratio estimate evolution ")
##Predicted R0 using model
# add 'fit', 'lwr', and 'upr' columns to dataframe (generated by predict)
R0_predict <- cbind(germany_cum_data, predict(germany_R0, interval = 'confidence'))
R0_prediction = predict(germany_R0)
# plot the points (actual observations), regression line, and confidence interval
p <- ggplot(R0_predict, aes(cum_delta_recovered + cum_delta_deaths,
cum_delta_recovered + cum_delta_deaths + cum_delta_inf))
p <- p + geom_point()
p <- p + geom_line(aes(cum_delta_deaths + cum_delta_recovered, R0_prediction))
p <- p + geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) +
ggtitle("Fitted R0 line and  actual data for India")
p
library(deSolve)
library(RColorBrewer)
Infected <- germany_inf[65:97]
Recovered <- germany_recovered[65:97]
Deaths <- germany_deaths[65:97]
Confirmed <- germany_cnf[65:97]
day <- 0:(length(Infected)-1)
N <- 1000000
###edit 1: use different boundary condition
###init <- c(S = N-1, I = 1, R = 0)
init <-
c(S = N-Infected[1] - Recovered[1] - Deaths[1], I = Infected[1],
R = Recovered[1], D = Deaths[1])
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
####edit 2; use equally scaled variables
with(par, { dS <- -alpha * (S/N) * I
dI <- alpha * (S/N) * I - beta * I - gamma * I
dR <- beta * I
dD <- gamma * I
list(c(dS, dI, dR, dD))
})
}
RSS.SIR <- function(parameters) {
names(parameters) <- c("alpha", "beta", "gamma")
out <- ode(y = init, times = day, func = SIR, parms = parameters)
fit <- out[ , 3] + out[ , 4] + out[ , 5]
RSS <- sum((Confirmed- fit)^2)
return(RSS)
}
lower = c(0, 0, 0)
upper = c(10, 1, 1)  ###limit box for parameters for L-BFGS-B
### edit: get a good starting condition
#mod <- nls(Infected ~ a*exp(b*day),  start = list(a = Infected[20],  b = (1/20)*log(Infected[40]/Infected[40])))
#optimsstart <- c(2,1)*coef(mod)[2]
optimsstart <- c(0.7, 0.4,  0.2) #initial guess for parameters
set.seed(12)
Opt <- optim(optimsstart, RSS.SIR, method = "L-BFGS-B", lower = lower, upper = upper,
hessian = TRUE)
#Opt$par
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 26", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title({'Germany: Green is confirmed cases predicted by our model,'...
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title({'Germany: Green is confirmed cases predicted by our model and',...
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title({'Germany: Green is confirmed cases predicted by our model and,...'red is actual data.'})
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", title="Germany: Green is confirmed cases predicted by our model, red is actual data.", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(foreach)
library(LICORS)
library(caret)
library(reshape2)
library(olsrr)
library(scales)
confirmed <- read.csv("data/time_series_covid19_confirmed_global.csv")
deaths <- read.csv("data/time_series_covid19_deaths_global.csv")
recovered <- read.csv("data/time_series_covid19_recovered_global.csv")
head(confirmed, 5)
countries = c("Italy", "Spain", "Germany", "India", "Sweden", "Singapore", "Iran", "Korea, South")
confirmed_countries = confirmed[confirmed$Country.Region %in% countries,]
deaths_countries = deaths[deaths$Country.Region %in% countries,]
recovered_countries = recovered[recovered$Country.Region %in% countries,]
### EXTRACTING CONFIRMED DATA FOR COUNTRIES
confirmed_countries_melt = melt(confirmed_countries, id=c("Province.State", "Country.Region", "Lat", "Long"),
variable.name = "Day")
confirmed_countries_melt = confirmed_countries_melt[which(confirmed_countries_melt$value > -1),]
confirmed_countries_melt$days_since = rep(1:109, each=8)
#View(confirmed_countries_melt)
#Plotting the data
ggplot(confirmed_countries_melt, aes(x=days_since, y=log(value), group=Country.Region, color=Country.Region)) +
geom_point() +
geom_line() + xlab("Days since Jan 22 ") + ylab("log(Confirmed cases)")  +
ggtitle("Confirmed cases plot for different countries with days since Jan 22")
###EXTRACTING RECOVERED DATA OF GERMANY
recovered_countries_melt = melt(recovered_countries, id=c("Province.State", "Country.Region", "Lat", "Long"),
variable.name = "Day")
recovered_countries_melt = recovered_countries_melt[which(recovered_countries_melt$value > -1),]
recovered_countries_melt$days_since = rep(1:109, each=8)
ggplot(recovered_countries_melt, aes(x=days_since, y=log(value), group=Country.Region, color=Country.Region)) +
geom_point() +
geom_line() + xlab("Days since Jan 22 ") + ylab("log(Recovered cases)")  +
ggtitle("Recovered cases plot for different countries with days since Jan 22")
###EXTRACTING DEATHS DATA OF GERMANY
deaths_countries_melt = melt(deaths_countries, id=c("Province.State", "Country.Region", "Lat", "Long"),
variable.name = "Day")
deaths_countries_melt = deaths_countries_melt[which(deaths_countries_melt$value > -1),]
deaths_countries_melt$days_since = rep(1:109, each=8)
ggplot(deaths_countries_melt, aes(x=days_since, y=log(value), group=Country.Region, color=Country.Region)) +
geom_point() +
geom_line() + xlab("Days since Jan 22 ") + ylab("log(Deaths)")  +
ggtitle("Deaths plot for different countries with days since Jan 22")
country = "Germany" #Country chosen
#Extract country data from countries data
germany_cnf_melt =
confirmed_countries_melt[which(confirmed_countries_melt$Country.Region == country), ]
#Extract confirmed number  as a vector
germany_cnf = germany_cnf_melt$value
#Extract delta infected vector delta_cnf(t) = I(t) - I(t-1)
germany_delta_cnf = diff(germany_cnf)
#Cumulative sum of delta_cnf
germany_cum_delta_cnf = cumsum(germany_delta_cnf)
germany_deaths_melt =
deaths_countries_melt[which(deaths_countries_melt$Country.Region == country), ]
#Extract deaths number as a vector
germany_deaths = germany_deaths_melt$value
#Extract delta deathsvector delta_deaths(t) = D(t) - D(t-1)
germany_delta_deaths = diff(germany_deaths)
#Cumulative sum of delta_deaths
germany_cum_delta_deaths = cumsum(germany_delta_deaths)
#Extract germany data from countries recovered data
germany_recovered_melt =
recovered_countries_melt[which(recovered_countries_melt$Country.Region == country), ]
#Extract recovered number as a vector
germany_recovered = germany_recovered_melt$value
#Extract delta recovered vector delta_recovered(t) = R(t) - R(t-1)
germany_delta_recovered = diff(germany_recovered)
#Cumulative sum of delta_recovered
germany_cum_delta_recovered = cumsum(germany_delta_recovered)
### Caluclating infected numbers from confirmed cases
#Extract infected number cases as a vector
germany_inf = germany_cnf - germany_recovered - germany_deaths
#Extract delta infected vector delta_inf(t) = I(t) - I(t-1)
germany_delta_inf = diff(germany_inf)
#Cumulative sum of delta_inf
germany_cum_delta_inf = cumsum(germany_delta_inf)
###ESTIMATING CASE FATALITY RATIO
#Making data frame of cumulative data
germany_cum_data_full =
data.frame(delta_inf= germany_delta_inf, cum_delta_inf=germany_cum_delta_inf,
delta_recovered = germany_delta_recovered,
cum_delta_recovered= germany_cum_delta_recovered, delta_deaths = germany_delta_deaths,
cum_delta_deaths=germany_cum_delta_deaths)
##VARY THE NUMBER OF DAYS CHOSEN FOR ANALYSIS
ndays = 65:97
gamma_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(gamma_data) <- x
beta_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(beta_data) <- x
R0_data <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("est", "lwr", "upr")
colnames(R0_data) <- x
#loop over days window chosen
for (days in ndays) {
germany_cum_data = germany_cum_data_full[1:days, ]
#View(germany_cum_data)
#fitting a linear model for case fatality ratio
germany_gamma <- lm(cum_delta_deaths ~ cum_delta_inf-1  , data=germany_cum_data)
# build linear regression model on full data
###ESTIMATING CASE  RECOVERY RATIO
cor(germany_cum_delta_inf, germany_cum_delta_recovered)
#high correlation
#fitting a linear model for case recovery ratio
germany_beta <- lm(cum_delta_recovered ~ cum_delta_inf-1 , data=germany_cum_data)
# build linear regression model on full data with no intercept
###ESTIMATING R0
#fitting a linear model for case basic reproducibility number R0
germany_R0 <- lm(cum_delta_deaths + cum_delta_recovered + cum_delta_inf
~ I(cum_delta_recovered + cum_delta_deaths)-1  , data=germany_cum_data)
# build linear regression model on full data
##Storing estimations and conf intervals
conf = confint(germany_gamma)
gamma_row <- list(est = summary(germany_gamma)$coefficients[1], lwr = conf[1], upr = conf[2])
gamma_data = rbind(gamma_data, gamma_row)
conf = confint(germany_beta)
beta_row <- list(est = summary(germany_beta)$coefficients[1], lwr = conf[1], upr = conf[2])
beta_data = rbind(beta_data, beta_row)
conf = confint(germany_R0)
R0_row <- list(est = summary(germany_R0)$coefficients[1], lwr = conf[1], upr = conf[2])
R0_data = rbind(R0_data, R0_row)
}
ggplot(R0_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab("R0") + ggtitle("Germany: R0 estimate evolution ")
ggplot(beta_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab("case recovery ratio") + ggtitle("Germany: case recovery ratio estimate evolution ")
ggplot(gamma_data, aes(ndays, est)) + geom_point() + geom_line(aes(ndays, est)) +
geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) + xlab("Number of days since Jan 22") +
ylab(" case fatality ratio") + ggtitle(" Germany: case fatality ratio estimate evolution ")
##Predicted R0 using model
# add 'fit', 'lwr', and 'upr' columns to dataframe (generated by predict)
R0_predict <- cbind(germany_cum_data, predict(germany_R0, interval = 'confidence'))
R0_prediction = predict(germany_R0)
# plot the points (actual observations), regression line, and confidence interval
p <- ggplot(R0_predict, aes(cum_delta_recovered + cum_delta_deaths, cum_delta_recovered +
cum_delta_deaths + cum_delta_inf))
p <- p + geom_point()
p <- p + geom_line(aes(cum_delta_deaths + cum_delta_recovered, R0_prediction))
p <- p + geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.5) +
ggtitle("Germany: Fitted R0 line and  actual data")
p
library(deSolve)
library(RColorBrewer)
Infected <- germany_inf[50:97]
Recovered <- germany_recovered[50:97]
Deaths <- germany_deaths[50:97]
Confirmed <- germany_cnf[50:97]
day <- 0:(length(Infected)-1)
N <- 830000
###edit 1: use different boundary condition
###init <- c(S = N-1, I = 1, R = 0)
init <- c(S = N-Infected[1] - Recovered[1] - Deaths[1], I = Infected[1], R = Recovered[1], D = Deaths[1])
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
####edit 2; use equally scaled variables
with(par, { dS <- -alpha * (S/N) * I
dI <- alpha * (S/N) * I - beta * I - gamma * I
dR <- beta * I
dD <- gamma * I
list(c(dS, dI, dR, dD))
})
}
RSS.SIR <- function(parameters) {
names(parameters) <- c("alpha", "beta", "gamma")
out <- ode(y = init, times = day, func = SIR, parms = parameters)
fit <- out[ , 3] + out[ , 4] + out[ , 5]
RSS <- sum((Confirmed- fit)^2)
return(RSS)
}
lower = c(0, 0, 0)
upper = c(10, 1, 1)  ###Limit box for parameters for L-BFGS-B
optimsstart <- c(0.7, 0.4,  0.2) #initial guess for parameters
set.seed(12)
Opt <- optim(optimsstart, RSS.SIR, method = "L-BFGS-B", lower = lower, upper = upper,
hessian = TRUE)
#Opt$par
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title("Germany: Green is confirmed cases predicted by our model, red is actual data.",
cex= 2,   font=4, col="blue")
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title("Germany: Green is confirmed cases predicted by our model, red is actual data.",
cex= 2,   font=1, col="blue")
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title("Germany: Green is confirmed cases predicted by our model, red is actual data.",
cex= 1,   font=1, col="blue")
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title("Germany: Green is confirmed cases predicted by our model, red is actual data.", font=.5)
Opt_par <- Opt$par
names(Opt_par) = c("alpha", "beta", "gamma")
t <- 0:120
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
predict <- fit$I + fit$D + fit$R
plot(t, predict, col="green", xlab="Days since March 11", ylab="Confirmed cases")
lines(day, Confirmed, col="red")
title(main=list("Germany: Green is confirmed cases predicted by our model, red is actual data.", cex=1, col="red", font=.5))
