str(SaratogaHouses)
library(tidyverse, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(mosaic, quietly = TRUE)
library(FNN, quietly = TRUE)
library(foreach, quietly = TRUE)
data(SaratogaHouses)
summary(SaratogaHouses)
#Defining models
# Baseline model
lm_small = lm(price ~ bedrooms + bathrooms + lotSize, data=SaratogaHouses)
# 11 main effects
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=SaratogaHouses)
# Sometimes it's easier to name the variables we want to leave out
# The command below yields exactly the same model.
# the dot (.) means "all variables not named"
# the minus (-) means "exclude this variable"
lm_medium2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=SaratogaHouses)
coef(lm_medium)
coef(lm_medium2)
# All interactions
# the ()^2 says "include all pairwise interactions"
lm_big = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=SaratogaHouses)
####
# Compare out-of-sample predictive performance
####
# Split into training and testing sets
n = nrow(SaratogaHouses) # number of rows
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
rmse = function(y, yhat) {
sqrt( mean( (y - yhat)^2 ) )
}
# Root mean-squared prediction error
rmse(saratoga_test$price, yhat_test1)
rmse(saratoga_test$price, yhat_test2)
rmse(saratoga_test$price, yhat_test3)
# easy averaging over train/test splits
n_train = round(0.8*n)  # round to nearest integer
n_test = n - n_train
rmse_vals = do(100)*{
# re-split into train and test cases with the same sample sizes
train_cases = sample.int(n, n_train, replace=FALSE)
test_cases = setdiff(1:n, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
# Fit to the training data
lm1 = lm(price ~ lotSize + bedrooms + bathrooms, data=saratoga_train)
lm2 = lm(price ~ . - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
lm3 = lm(price ~ (. - sewer - waterfront - landValue - newConstruction)^2, data=saratoga_train)
lm_dominate = lm(price ~ lotSize + age + livingArea + pctCollege +
bedrooms + fireplaces + bathrooms + rooms + heating + fuel +
centralAir + lotSize:heating + livingArea:rooms + newConstruction + livingArea:newConstruction, data=saratoga_train)
# Predictions out of sample
yhat_test1 = predict(lm1, saratoga_test)
yhat_test2 = predict(lm2, saratoga_test)
yhat_test3 = predict(lm3, saratoga_test)
yhat_test4 = predict(lm_dominate, saratoga_test)
c(rmse(saratoga_test$price, yhat_test1),
rmse(saratoga_test$price, yhat_test2),
rmse(saratoga_test$price, yhat_test3),
rmse(saratoga_test$price, yhat_test4))
}
rmse_vals
colMeans(rmse_vals)
boxplot(rmse_vals)
str(SaratogaHouses)
SaratogaHouses$ConstructionCost <- SaratogaHouses$price - SaratogaHouses$landValue
SaratogaHouses$waterfrontDummy <- ifelse(SaratogaHouses$waterfront == "yes", 1,0)
SaratogaHouses$newConstructionDummy <- ifelse(SaratogaHouses$age == "yes", 1,0)
SaratogaHouses$centralAirDummy <- ifelse(SaratogaHouses$age == "yes", 1,0)
str(SaratogaHouses)
HeatingElectric <- SaratogaHouses[grep("electric", SaratogaHouses$heating), ]
HeatingSteam <- SaratogaHouses[grep("hot water/steam", SaratogaHouses$heating), ]
HeatingHotAir <- SaratogaHouses[grep("hot air", SaratogaHouses$heating), ]
FuelOil <- SaratogaHouses[grep("oil", SaratogaHouses$fuel), ]
FuelGas <- SaratogaHouses[grep("gas", SaratogaHouses$fuel), ]
FuelElectric <- SaratogaHouses[grep("electric", SaratogaHouses$fuel), ]
SewerSeptic <- SaratogaHouses[grep("septic", SaratogaHouses$sewer), ]
SewerPublicCommercial <- SaratogaHouses[grep("public/commercial", SaratogaHouses$sewer), ]
SewerNone <- SaratogaHouses[grep("none", SaratogaHouses$sewer), ]
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=SaratogaHouses)
lm_handbuilt = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir + ConstructionCost +
ConstructionCost*landValue + newConstructionDummy*landValue + newConstructionDummy*lotSize +
pctCollege*age + bathrooms*bedrooms, data = SaratogaHouses)
#Defining only the numerics of the train-test data sets
N = nrow(SaratogaHouses)
train = round(0.8*N)
test = (N-train)
#Defining the function
rmse = function(y, yhat) {
sqrt( mean( (y - yhat)^2 ) )
}
#Rmse iterations
rmse1 <- NULL
rmse2 <- NULL
for (i in seq(1:00)){
#Choosing data for training and testing
train_cases = sample.int(N, train, replace=FALSE)
test_cases = setdiff(1:N, train_cases)
#Define the train-test data sets (for all X's and Y)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
#Training
#Baseline model
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=saratoga_train)
#Hand-built Model
lm_handbuilt = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir + ConstructionCost +
ConstructionCost*landValue + newConstructionDummy*landValue + newConstructionDummy*lotSize +
pctCollege*age + bathrooms*bedrooms, age*livingArea, data = saratoga_train)
#Testing
yhat_test1 = predict(lm_medium, saratoga_test)
yhat_test2 = predict(lm_handbuilt, saratoga_test)
#Run it on the actual and the predicted values
rmse1[i]= rmse(saratoga_test$price, yhat_test1)
rmse2[i]= rmse(saratoga_test$price, yhat_test2)
}
for (i in seq(1:00)){
#Choosing data for training and testing
train_cases = sample.int(N, train, replace=FALSE)
test_cases = setdiff(1:N, train_cases)
#Define the train-test data sets (for all X's and Y)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
#Training
#Baseline model
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=saratoga_train)
#Hand-built Model
lm_handbuilt = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir + ConstructionCost +
ConstructionCost*landValue + newConstructionDummy*landValue + newConstructionDummy*lotSize +
pctCollege*age + bathrooms*bedrooms, data = saratoga_train)
#Testing
yhat_test1 = predict(lm_medium, saratoga_test)
yhat_test2 = predict(lm_handbuilt, saratoga_test)
#Run it on the actual and the predicted values
rmse1[i]= rmse(saratoga_test$price, yhat_test1)
rmse2[i]= rmse(saratoga_test$price, yhat_test2)
}
mean(rmse1)
mean(rmse2)
KNNModel = do(100)*{
N = nrow(SaratogaHouses)
train = round(0.8*N)
test = (N-train)
train_cases = sample.int(N, train, replace=FALSE)
test_cases = setdiff(1:N, train_cases)
saratoga_train = SaratogaHouses[train_cases,]
saratoga_test = SaratogaHouses[test_cases,]
Xtrain = model.matrix(~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir + ConstructionCost
- 1, data=saratoga_train)
Xtest = model.matrix(~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir + ConstructionCost
- 1, data=saratoga_test)
Ytrain = saratoga_train$price
Ytest = saratoga_test$price
#Scaling the features (Standardization)
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale = scale_train)
Xtilde_test = scale(Xtest, scale = scale_train)
#The for loop
k_grid = seq(2,100)
rmse_grid = foreach(K = k_grid, .combine='c') %do% {
KNNModel = knn.reg(Xtilde_train, Xtilde_test, Ytrain, k=K)
rmse(Ytest, KNNModel$pred)
}
}
knit_with_parameters('~/GitHub/SDS323_Spring2020/hw2/Question2/Solution.Rmd')
knit_with_parameters('~/GitHub/SDS323_Spring2020/hw2/Question2/Solution.Rmd')
knit_with_parameters('~/GitHub/SDS323_Spring2020/hw2/Question2/Solution.Rmd')
render("input.Rmd", "all")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
render("Solution.Rmd", "all")
knit_with_parameters('~/GitHub/SDS323_Spring2020/hw2/Question2/Solution.Rmd')
render("Solution.Rmd")
library(rmarkdown)
render("Solution.Rmd")
render("Solution.Rmd", "all")
render("question1.Rmd", "all")
unlink('~/GitHub/SDS323_Spring2020/hw2/Question1/question1_cache', recursive = TRUE)
